name: Build and Pushlish to PyPI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 provides intel chips, later are on M1 chips
        # os: [ubuntu-latest, macos-13, macos-latest]
        os: [ubuntu-latest]
        # Will not work for 3.12 until we update to pyproject.toml and stop using
        # distutils
        # python-version: ["3.10", "3.11", "3.12"]
        python-version: ["3.12"]
        experimental: [false]
        # include:
        #   - os: ubuntu-latest
        #     arch: x86_64
        #   - os: ubuntu-latest
        #     arch: aarch64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse
          ls wheelhouse
        env:
          # CIBW_ARCHS: ${{ matrix.arch }}
          # Will not work for 3.12 until we update to pyproject.toml and stop using
          # distutils
          CIBW_BUILD: "cp310-* cp311-*"
          CIBW_SKIP: "cp3?-musllinux* *i686"
          CIBW_BEFORE_BUILD_LINUX: |
            pip install numpy
            if [[ "$CIBW_MANYLINUX_X86_64_IMAGE" ]]; then
                yum install -y gcc gcc-gfortran
            elif [[ "$CIBW_MUSLLINUX_X86_64_IMAGE" ]]; then
                apk add --no-cache gcc gfortran make
            fi

      - name: Check built wheels
        run: |
          ls -lh wheelhouse/
          python -m pip install twine
          python -m twine check wheelhouse/*

      - name: Check if version exists on test-PyPI
        id: test_pypi_check_version
        run: |
          VERSION=$(python setup.py --version)
          PACKAGE_NAME=$(python setup.py --name)
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://test.pypi.org/pypi/$PACKAGE_NAME/$VERSION/json)
          echo "response=$RESPONSE" >> $GITHUB_ENV

      - name: Upload wheels to test-PyPI
        if: env.response != '200'
        env:
          TWINE_USERNAME: ${{ secrets.TEST_PYPI_USER }}
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
        run: |
          python -m twine upload --repository testpypi wheelhouse/*

      # - name: Check if version exists on PyPI
      #   id: pypi_check_version
      #   run: |
      #     VERSION=$(python setup.py --version)
      #     PACKAGE_NAME=$(python setup.py --name)
      #     RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://pypi.org/pypi/$PACKAGE_NAME/$VERSION/json)
      #     echo "response=$RESPONSE" >> $GITHUB_ENV

      # - name: Upload wheels to PyPI
      #   if: env.response != '200'
      #   env:
      #     TWINE_USERNAME: ${{ secrets.PYPI_USER }}
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #   run: |
      #     python -m twine upload wheelhouse/*